/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./app/modules/flamapy/assets/js/scripts.js":
/*!**************************************************!*\
  !*** ./app/modules/flamapy/assets/js/scripts.js ***!
  \**************************************************/
/***/ (() => {

eval("function checkUVL(file_id) {\n    const outputDiv = document.getElementById('check_' + file_id);\n    outputDiv.innerHTML = ''; // Clear previous output\n\n    fetch(`/flamapy/check_uvl/${file_id}`)\n        .then(response => {\n            return response.json().then(data => ({\n                status: response.status,\n                data\n            }));\n        })\n        .then(({ status, data }) => {\n            if (status === 400) {\n                // Display errors\n                if (data.errors) {\n                    outputDiv.innerHTML = '<span class=\"badge badge-danger\">Errors:</span>';\n                    data.errors.forEach(error => {\n                        const errorElement = document.createElement('span');\n                        errorElement.className = 'badge badge-danger';\n                        errorElement.textContent = error;\n                        outputDiv.appendChild(errorElement);\n                        outputDiv.appendChild(document.createElement('br')); // Line break for better readability\n                    });\n                } else {\n                    outputDiv.innerHTML = `<span class=\"badge badge-danger\">Error: ${data.error}</span>`;\n                }\n            } else if (status === 200) {\n                // Display success message\n                outputDiv.innerHTML = '<span class=\"badge badge-success\">Valid Model</span>';\n            } else {\n                // Handle unexpected status\n                outputDiv.innerHTML = `<span class=\"badge badge-warning\">Unexpected response status: ${status}</span>`;\n            }\n        })\n        .catch(error => {\n            // Handle fetch errors\n            outputDiv.innerHTML = `<span class=\"badge badge-danger\">An unexpected error occurred: ${error.message}</span>`;\n        });\n}\n\nfunction checkSAT(file_id) {\n    const outputDiv = document.getElementById('check_' + file_id);\n    outputDiv.innerHTML = ''; // Clear previous output\n\n    fetch(`/flamapy/valid/${file_id}`)\n        .then(response => {\n            return response.json().then(data => ({\n                status: response.status,\n                data\n            }));\n        })\n        .then(({ status, data }) => {\n            if (status === 400) {\n                // Display errors\n                if (data.errors) {\n                    outputDiv.innerHTML = '<span class=\"badge badge-danger\">Errors:</span>';\n                    data.errors.forEach(error => {\n                        const errorElement = document.createElement('span');\n                        errorElement.className = 'badge badge-danger';\n                        errorElement.textContent = error;\n                        outputDiv.appendChild(errorElement);\n                        outputDiv.appendChild(document.createElement('br')); // Line break for better readability\n                    });\n                } else {\n                    outputDiv.innerHTML = `<span class=\"badge badge-danger\">Error: ${data.error}</span>`;\n                }\n            } else if (status === 200) {\n                // Display success message\n                outputDiv.innerHTML = '<span class=\"badge badge-success\">Valid SAT Model</span>';\n            } else {\n                // Handle unexpected status\n                outputDiv.innerHTML = `<span class=\"badge badge-warning\">Unexpected response status: ${status}</span>`;\n            }\n        })\n        .catch(error => {\n            // Handle fetch errors\n            outputDiv.innerHTML = `<span class=\"badge badge-danger\">An unexpected error occurred: ${error.message}</span>`;\n        });\n}\n\n/*\nasync function valid() {\n    showLoading()\n    let pyodide = await loadPyodide();\n    await pyodide.loadPackage(\"micropip\");\n    const micropip = pyodide.pyimport(\"micropip\");\n    //await micropip.install(\"/assets/web_assembly/antlr4_python3_runtime-4.7.2-py3-none-any.whl\");\n    await micropip.install(\"antlr4-python3-runtime==4.13.1\");\n    await micropip.install(\"uvlparser==2.0.1\");\n    //await micropip.install(\"afmparser==1.0.0\");\n\n    await pyodide.runPythonAsync(\n    `\n        import micropip\n        #await micropip.install(\"flamapy-fm-dist\", deps=False)#this is to avoid problems with deps later on\n        await micropip.install(\"flamapy==2.0.1.dev1\", deps=False);\n        await micropip.install(\"flamapy-fm==2.0.1.dev1\", deps=False);\n        await micropip.install(\"flamapy-sat\");\n    `\n    )\n    hideLoading()\n\n    try {\n        let output = pyodide.runPython(\n        `\n        import js\n\n        file_content = js.document.getElementById('fileContent').textContent\n        div = js.document.createElement(\"result\")\n\n        with open(\"uvlfile.uvl\", \"w\") as text_file:\n            print(file_content, file=text_file)\n\n        from flamapy.interfaces.python.FLAMAFeatureModel import FLAMAFeatureModel\n\n        fm = FLAMAFeatureModel(\"uvlfile.uvl\")\n        result=fm.valid()\n\n        div.innerHTML = \"<div id='deleteme'>\"+str(result)+\"</div>\"\n        exists=js.document.getElementById('deleteme')\n        if(exists):\n            exists.remove()\n\n        js.document.getElementById('result').append(div)\n        `\n    );\n    } catch (err) {\n        console.log(err);\n    }\n}\n*/\n\n//# sourceURL=webpack://uvlhub/./app/modules/flamapy/assets/js/scripts.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./app/modules/flamapy/assets/js/scripts.js"]();
/******/ 	
/******/ })()
;