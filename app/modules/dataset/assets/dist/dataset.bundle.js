/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./app/modules/dataset/assets/js/scripts.js":
/*!**************************************************!*\
  !*** ./app/modules/dataset/assets/js/scripts.js ***!
  \**************************************************/
/***/ (() => {

eval("document.addEventListener('DOMContentLoaded', () => {\n    \n    /*\n        Selectable elements\n    */\n    const datasetAnonymousCheckbox = document.getElementById('dataset_anonymous');\n    const uploadButton = document.getElementById('uploadButton');\n    const upgradeButton = document.getElementById('upgradeButton');\n    const authorsForm = document.getElementById('authors_form');\n    const agreeCheckbox = document.getElementById('agreeCheckbox');\n\n    const addField = (newAuthor, name, text, className = 'col-lg-6 col-12 mb-3') => {\n        const fieldWrapper = document.createElement('div');\n        fieldWrapper.className = className;\n\n        const label = document.createElement('label');\n        label.className = 'form-label';\n        label.for = name;\n        label.textContent = text;\n\n        const field = document.createElement('input');\n        field.name = name;\n        field.className = 'form-control';\n\n        fieldWrapper.appendChild(label);\n        fieldWrapper.appendChild(field);\n        newAuthor.appendChild(fieldWrapper);\n    };\n\n    const addRemoveButton = (newAuthor) => {\n        const buttonWrapper = document.createElement('div');\n        buttonWrapper.className = 'col-12 mb-2';\n\n        const button = document.createElement('button');\n        button.textContent = 'Remove author';\n        button.className = 'btn btn-danger btn-sm';\n        button.type = 'button';\n        button.addEventListener('click', (event) => {\n            event.preventDefault();\n            newAuthor.remove();\n        });\n\n        buttonWrapper.appendChild(button);\n        newAuthor.appendChild(buttonWrapper);\n    };\n\n    const createAuthorBlock = (idx, suffix) => {\n        const newAuthor = document.createElement('div');\n        newAuthor.className = 'author row';\n        newAuthor.style.cssText = \"border:2px dotted #ccc;border-radius:10px;padding:10px;margin:10px 0; background-color: white\";\n\n        addField(newAuthor, `${suffix}authors-${idx}-name`, 'Name *');\n        addField(newAuthor, `${suffix}authors-${idx}-affiliation`, 'Affiliation');\n        addField(newAuthor, `${suffix}authors-${idx}-orcid`, 'ORCID');\n        addRemoveButton(newAuthor);\n\n        return newAuthor;\n    };\n\n    const checkTitleAndDescription = () => {\n        const titleInput = document.querySelector('input[name=\"title\"]');\n        const descriptionTextarea = document.querySelector('textarea[name=\"desc\"]');\n\n        titleInput.classList.remove(\"error\");\n        descriptionTextarea.classList.remove(\"error\");\n        cleanUploadErrors();\n\n        const titleLength = titleInput.value.trim().length;\n        const descriptionLength = descriptionTextarea.value.trim().length;\n\n        if (titleLength < 3) {\n            writeUploadError(\"Title must be of minimum length 3\");\n            titleInput.classList.add(\"error\");\n        }\n\n        if (descriptionLength < 3) {\n            writeUploadError(\"Description must be of minimum length 3\");\n            descriptionTextarea.classList.add(\"error\");\n        }\n\n        return (titleLength >= 3 && descriptionLength >= 3);\n    };\n\n    const addAuthor = () => {\n        const authors = document.getElementById('authors');\n        const newAuthor = createAuthorBlock(amountAuthors++, \"\");\n        authors.appendChild(newAuthor);\n    };\n\n    const showLoading = () => {\n        document.querySelectorAll('.submitButton').forEach(button => {\n            button.style.display = \"none\";\n        });\n        document.getElementById(\"loading\").style.display = \"block\";\n    };\n    \n    const hideLoading = () => {\n        document.querySelectorAll('.submitButton').forEach(button => {\n            button.style.display = \"block\";\n        });\n        document.getElementById(\"loading\").style.display = \"none\";\n    };\n    \n\n    const writeUploadError = (errorMessage) => {\n        const uploadError = document.getElementById(\"upload_error\");\n        const alert = document.createElement('p');\n        alert.style.margin = '0';\n        alert.style.padding = '0';\n        alert.textContent = 'Upload error: ' + errorMessage;\n        uploadError.appendChild(alert);\n        uploadError.style.display = 'block';\n    };\n\n    const sendDatasetToEndpoint = (endpoint) => {\n        cleanUploadErrors();\n        showLoading();\n\n        if (checkTitleAndDescription()) {\n            const formData = {};\n\n            [\"basic_info_form\", \"uploaded_models_form\"].forEach((formId) => {\n                const form = document.getElementById(formId);\n                const inputs = form.querySelectorAll('input, select, textarea');\n                inputs.forEach(input => {\n                    if (input.name) {\n                        formData[input.name] = formData[input.name] || [];\n                        formData[input.name].push(input.value);\n                    }\n                });\n            });\n\n            const formDataJson = JSON.stringify(formData);\n            console.log(formDataJson);\n\n            const csrfToken = document.getElementById('csrf_token').value;\n            const formUploadData = new FormData();\n            formUploadData.append('csrf_token', csrfToken);\n\n            for (const key in formData) {\n                if (formData.hasOwnProperty(key)) {\n                    formUploadData.set(key, formData[key]);\n                }\n            }\n\n            let checkedOrcid = true;\n            if (Array.isArray(formData.author_orcid)) {\n                for (let orcid of formData.author_orcid) {\n                    orcid = orcid.trim();\n                    if (orcid !== '' && !isValidOrcid(orcid)) {\n                        hideLoading();\n                        writeUploadError(\"ORCID value does not conform to valid format: \" + orcid);\n                        checkedOrcid = false;\n                        break;\n                    }\n                }\n            }\n\n            let checkedName = true;\n            if (Array.isArray(formData.author_name)) {\n                for (let name of formData.author_name) {\n                    name = name.trim();\n                    if (name === '') {\n                        hideLoading();\n                        writeUploadError(\"The author's name cannot be empty\");\n                        checkedName = false;\n                        break;\n                    }\n                }\n            }\n\n            const datasetAnonymousCheckboxValue = datasetAnonymousCheckbox.checked;\n            formUploadData.append('dataset_anonymous', datasetAnonymousCheckboxValue);\n\n            const datasetIdInput = document.getElementById('datasetId');\n            let datasetId = '';\n            if (datasetIdInput) {\n                datasetId = datasetIdInput.value;\n                formUploadData.append('datasetId', datasetId);\n            }\n            console.log(\"Dataset with ID: \" + datasetId);\n\n            if (checkedOrcid && checkedName) {\n                console.log(\"Sending this form data: \");\n\n                formUploadData.forEach((value, key) => {\n                    console.log(key, value);\n                  });\n\n                fetch(endpoint, {\n                    method: 'POST',\n                    body: formUploadData\n                })\n                .then(response => {\n                    if (response.ok) {\n                        console.log('Dataset sent successfully');\n                        response.json().then(data => {\n                            console.log(data.message);\n                            window.location.href = \"/dataset/list\";\n                        });\n                    } else {\n                        response.json().then(data => {\n                            console.error('Error: ' + data.message);\n                            hideLoading();\n                            writeUploadError(data.message);\n                        });\n                    }\n                })\n                .catch(error => {\n                    console.error('Error in POST request:', error);\n                });\n            }\n        } else {\n            hideLoading();\n        }\n    };\n\n    const isValidOrcid = (orcid) => {\n        const orcidRegex = /^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/;\n        return orcidRegex.test(orcid);\n    };\n\n    const toggleUploadButton = () => {\n        if (agreeCheckbox && uploadButton) {\n            uploadButton.disabled = !agreeCheckbox.checked;\n        }\n    };\n\n    const toggleAuthorsForm = () => {\n        if (datasetAnonymousCheckbox && authorsForm) {\n            authorsForm.style.display = datasetAnonymousCheckbox.checked ? 'none' : 'block';\n        }\n    };\n\n    /*\n        Event listeners\n    */\n    document.getElementById('add_author').addEventListener('click', addAuthor);\n\n    document.addEventListener('click', (event) => {\n        if (event.target && event.target.classList.contains('add_author_to_uvl')) {\n            const authorsButtonId = event.target.id;\n            const authorsId = authorsButtonId.replace(\"_button\", \"\");\n            const authors = document.getElementById(authorsId);\n            const id = authorsId.replace(\"_form_authors\", \"\");\n            const newAuthor = createAuthorBlock(amountAuthors, `feature_models-${id}-`);\n            authors.appendChild(newAuthor);\n        }\n    });\n\n    if (agreeCheckbox) {\n        agreeCheckbox.addEventListener('change', toggleUploadButton);\n        toggleUploadButton();\n    }\n\n    if (datasetAnonymousCheckbox) {\n        datasetAnonymousCheckbox.addEventListener('change', toggleAuthorsForm);\n        toggleAuthorsForm();\n    }\n\n    window.onload = () => {\n\n        testZenodoConnection();\n        updateAuthorInputs();\n\n        if (uploadButton) {\n            uploadButton.addEventListener('click', () => {\n                console.log(\"Sending data...\")\n                sendDatasetToEndpoint('/dataset/upload');\n            });\n        }\n\n        if (upgradeButton) {\n            upgradeButton.addEventListener('click', () => {\n                console.log(\"Sending data...\")\n                sendDatasetToEndpoint('/dataset/update');\n            });\n        }\n    };\n});\n\nlet currentId = 0;\nlet amountAuthors = 0;\nconst generateIncrementalId = () => currentId++;\nconst generateIncrementalAuthorsId = () => amountAuthors++;\n\nconst removeAuthor = (button) => {\n    const authorDiv = button.closest('.author');\n    if (authorDiv) {\n        authorDiv.remove();\n    }\n};\n\nconst cleanUploadErrors = () => {\n    const uploadError = document.getElementById(\"upload_error\");\n    uploadError.innerHTML = \"\";\n    uploadError.style.display = 'none';\n};\n\nconst showUploadDataset = () => {\n    document.getElementById(\"submit_dataset\").style.display = \"block\";\n};\n\nfunction updateAuthorInputs() {\n    const authors = document.querySelectorAll('#authors .author');\n    authors.forEach((author, index) => {\n        const nameInput = author.querySelector('input[id$=\"name\"]');\n        const affiliationInput = author.querySelector('input[id$=\"affiliation\"]');\n        const orcidInput = author.querySelector('input[id$=\"orcid\"]');\n\n        if (nameInput) {\n            nameInput.name = `authors-${index}-name`;\n            nameInput.id = `authors-${index}-name`;\n        }\n        if (affiliationInput) {\n            affiliationInput.name = `authors-${index}-affiliation`;\n            affiliationInput.id = `authors-${index}-affiliation`;\n        }\n        if (orcidInput) {\n            orcidInput.name = `authors-${index}-orcid`;\n            orcidInput.id = `authors-${index}-orcid`;\n        }\n        generateIncrementalAuthorsId();  \n    });\n}\n\n\n//# sourceURL=webpack://uvlhub/./app/modules/dataset/assets/js/scripts.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./app/modules/dataset/assets/js/scripts.js"]();
/******/ 	
/******/ })()
;